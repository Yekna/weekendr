// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Genre {
  ROCK
  METAL
  HIPHOP
  EDM
  POP
  FOLK
  REGGAE
  TECHNO
  HOUSE
  TRAP
  RANDB
}

model Party {
  id          String   @id @default(cuid())
  name        String
  tags        String?
  genre       Genre
  media       String[]
  date        DateTime
  Venue       Venue    @relation(fields: [venueId], references: [id])
  venueId     String
  dateCreated DateTime @default(now())
  published   Boolean  @default(false)
}

model Owner {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  password    String
  taxPictures String[]
  venues      Venue[]
  verified    Boolean  @default(false)
  premium     Boolean  @default(false)
}

model Venue {
  id           String  @id
  name         String  @unique
  picture      String?
  address      String  @unique
  parties      Party[]
  phone        String?
  owner        Owner?  @relation(fields: [ownerId], references: [id])
  ownerId      Int?
  rating       Int
  website      String?
  ratingsCount Int
  slug         String  @unique
  followers    Int     @default(0)
  about        String?
  lat          Float?
  lng          Float?

  @@index([lat, lng], name: "venue_location")
}

enum UserStatus {
  CELEBRITY
  DJ
}

model Post {
  id          String   @id @default(cuid())
  name        String
  description String
  images      String[]
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model User {
  id        String     @id @default(cuid())
  status    UserStatus
  stageName String
  picture   String
  followers Int        @default(0)
  slug      String     @unique
  posts     Post[]
}
